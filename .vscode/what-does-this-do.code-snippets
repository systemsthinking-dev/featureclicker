{
	// Place your featureclicker workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"vue-component": {
		"scope": "vue,typescript",
		"prefix": "vue-component",
		"body": [
			"<template>",
			"$2",
			"</template>",
			"",
			"<script lang=ts>",
			"import { Component, Prop, Vue } from \"vue-property-decorator\";",
			"",
			"@Component",
			"export default class $1 extends Vue {}",
			"</script>",
			"",
			"<style scoped>",
			"</style>",
			""
		],
		"description": "a vue component thinger"
	},
	"prop for a vue component": { // this one does not work, sadly. Maybe after a restart?
		"scope": "vue,typescript",
		"prefix": "prop",
		"body": "@Prop({ required: true }) private $1!: $2;"
	},
	"mocha test": {
		"scope": "typescript",
		"prefix": "desc",
		"body": [
			"describe(\"$1\", () => {",
			"  it(\"$2\", () => {",
			"    $3",
			"  });",
			"});",
			""
		]
	}
}